import CollectionSync;
import Expressions;
import OCLEvaluator;
import TupleAccessor;
import Sort;
import Util;
import Variables;
import VariableHelper;

modeltype allocationSpecification uses as('http://www.muml.org/psm/allocation/language/as/1.0.0');
modeltype ilptype uses ilp('http://www.muml.org/psm/allocation/ilp/1.0.0');
modeltype values uses values('http://www.eclipse.org/ocl/2015/Values');

-- XXX: we probably need a semantics change here generate ">= 1" inequalities
-- 		instead of "= 1" equations (needs to be discussed)
--		Since we now have relations, we need this even more!


library LocationConstraintLib;

helper Specification::createLocationConstraints(inout ilp : IntegerLinearProgram,
	oclContext : OclAny) {
	self.getLocationConstraints()->createLocationConstraint(ilp, oclContext);
}

helper LocationConstraint::createLocationConstraint(inout ilp : IntegerLinearProgram,
	oclContext : OclAny) {
	var td : Dict(Sequence(OclAny), Dict(Sequence(OclAny), Integer)) := self.evaluateOCL(oclContext)
		.asTupleValueSequence()
		->collectNested(toSequence())
		->computeTODO();
	var groupedAndSortedKeys : Sequence(List(Sequence(OclAny))) := td->groupKeysBySizeAndSort();
	groupedAndSortedKeys->forEach(group) {
		group->forEach(sources) {
			var todo : List(Sequence(OclAny)) := td->get(sources)->keys()
				->sortedListByVariableName();
			todo->forEach(seq) {
				seq->createHelperVariableAndConstraints(ilp);
			};
		};
		-- we do this in a separate loop, because we would need to adjust
		-- the testcases otherwise...
		group->forEach(sources) {
			var todo : List(Sequence(OclAny)) := td->get(sources)->keys()
				->sortedListByVariableName();
			todo->createConstraintExpression(ilp, self);
		}
	};
}

helper Sequence(Sequence(OclAny))::computeTODO() : Dict(Sequence(OclAny), Dict(Sequence(OclAny), Integer)) {
	var todo : Dict(Sequence(OclAny), Dict(Sequence(OclAny), Integer));
	self->forEach(seq) {
		seq := seq->sortComponentResourceSequence();
		var sources : Sequence(OclAny) := getOddNumbers(1, seq->size())
			->collect(i | seq->at(i));
		var sourcesDict : Dict(Sequence(OclAny), Integer);
		if (todo->hasKey(sources)) then {
			sourcesDict := todo->get(sources);
		} else {
			sourcesDict := Dict{};
			todo->put(sources, sourcesDict);
		} endif;
		sourcesDict->put(seq, 1);
	};
	return todo;
}

query Dict(Sequence(OclAny), Dict(Sequence(OclAny), Integer))::groupKeysBySizeAndSort() : Sequence(List(Sequence(OclAny))) {
	return if isReproducibleILP() then
		let data : List(Sequence(OclAny)) = self->values()->iterate(dict; acc : List(Sequence(OclAny)) = List {} |
			acc->union(dict->keys())
		)
		in
		data->collect(seq |
			seq->size()
		)->asSet()->sortedBy(seqSize |
			seqSize
		)->collectNested(seqSize |
			data->select(seq |
				seq->size() = seqSize
			)->sortComponentResourceSequences()->collectNested(seq |
				getOddNumbers(1, seq->size())->collect(i |
					seq->at(i)
				)
			)->asOrderedSet()->asList()
		)
	else
		Sequence {
			self->keys()
		}
	endif;
}

query Sequence(Sequence(OclAny))::sortComponentResourceSequences() : Sequence(Sequence(OclAny)) {
	return self->collectNested(seq |
		seq->sortComponentResourceSequence()
	)->sortedBy(seq | seq->getVariableName());
}

helper Sequence(Sequence(OclAny))::createConstraintExpression(inout ilp : IntegerLinearProgram,
	constraint : LocationConstraint) {
	var comment : String := if constraint.name <> '' then constraint.name else null endif;
	var constraintList : List(ConstraintExpression) := ilp.constraints->wrap();
	constraintList += self->createAdditionConstraintExpression(
		Operator::EQUAL_TO, '1', comment
	);
}

query Specification::getLocationConstraints() : OrderedSet(LocationConstraint) {
	return self.constraints
		->select(oclIsKindOf(LocationConstraint))
		->collect(oclAsType(LocationConstraint))
		->asOrderedSet();
}
