import VariableHelper;
import TupleAccessor;

modeltype allocationSpecification uses as('http://www.muml.org/psm/allocation/language/as/1.0.0');
modeltype values uses values('http://www.eclipse.org/ocl/2015/Values');

library Sort;

// common sorting code

property reproducibleILP : Boolean = true;

helper initialize(reproducibleILP : Boolean) {
	log("###");
	log("reproducibleILP: " + reproducibleILP.toString());
	log("###");
	this.reproducibleILP := reproducibleILP;
}

query isReproducibleILP() : Boolean {
	return reproducibleILP;
}

query Sequence(OclAny)::sortComponentResourceSequence() : Sequence(OclAny) {
	return let indexes : OrderedSet(Integer) = getOddNumbers(1, self->size())
	in
	indexes->collectNested(i | Sequence{self->at(i), self->at(i + 1)})
		->sortedBy(s | s->getVariableName())->flatten()
}

query Sequence(TupleValue)::sortWeightingComponentResourceTuples(tupleDescriptor : WeightTupleDescriptor) : Sequence(TupleValue) {
	return if reproducibleILP then
		self->sortedBy(tv : TupleValue | tv.getWeightingComponentResourceTupleSortId(tupleDescriptor))
	else
		self
	endif;
}

query TupleValue::getWeightingComponentResourceTupleSortId(tupleDescriptor : WeightTupleDescriptor) : String {
	// Order by component_ecu names and add the coefficient/LhsValue as a tie breaker
	// for the sort algo
	// this uniquely identifies a WeightingComponentResourceTuple tuple (because
	// the WeightingComponentResourceTuple tuples are contained in a set => no duplicates)
	return self.toSequence()->sortComponentResourceSequence()->getVariableName()
		+ ILLEGAL_VARIABLE_CHARS()->at(1) + self.getWeighting(tupleDescriptor); 
}

query TupleValue::getWeighting(tupleDescriptor : WeightTupleDescriptor) : String {
	return self.get(tupleDescriptor.weight).oclAsType(Real).toString();
}

query Sequence(Sequence(OclAny))::sortedByVariableName() : Sequence(Sequence(OclAny)) {
	return if reproducibleILP then
		self->sortedBy(seq |
			seq->getVariableName()
		)
	else
		self
	endif;
}

query OrderedSet(OclAny)::sortedByVariableName() : OrderedSet(OclAny) {
	return if reproducibleILP then
		self->sortedBy(
			getVariableName()
		)
	else
		self
	endif;
}

query List(Sequence(OclAny))::sortedListByVariableName() : List(Sequence(OclAny)) {
	return if reproducibleILP then 
		self->sortedBy(seq |
			seq->getVariableName()
		)->asList()
	else
		self
	endif;
}