test {
	nameProvider  'org.muml.psm.allocation.algorithm.ilp.tests.EcoreNameProvider'
	storageProvider 'org.muml.psm.allocation.algorithm.ilp.tests.EcoreStorageProvider' 
	
	oclContext ecore::EPackage
	
	import 'http://www.eclipse.org/emf/2002/Ecore'
	
	relation atLeastOne {
		descriptors (first : ecore::EClassifier, second : ecore::EPackage);
		lower 1;
		upper -1;
		ocl self.eSubpackages->at(1).eClassifiers->product(
			self.eSubpackages->at(3).eSubpackages
		);
	}
	
	-- relate each ic.sub3.eSubpackages package to at least one ic.sub2.eClassifiers class
	relation atLeastOnePkg {
		descriptors (first : ecore::EPackage, second : ecore::EClassifier);
		lower 1;
		upper -1;
		ocl self.eSubpackages->at(3).eSubpackages->product(
			self.eSubpackages->at(2).eClassifiers
		);
	}
	
	-- This just tests the correct ordering
	constraint implication order {
		premise myPremise;
		premise descriptors (clsRel1 : ecore::EClassifier, pkgRel1 : ecore::EPackage),
			(pkgRel2 : ecore::EPackage, clsRel2 : ecore::EClassifier);
		conclusion myConclusion;
		conclusion descriptors (clsRel1 : ecore::EClassifier, pkgRel1 : ecore::EPackage),
			(pkgRel2 : ecore::EPackage, clsRel2 : ecore::EClassifier);
		ocl Set {
			-- after reordering, this is the second tuple
			Tuple {
				-- premise
				myPremise = Set {
					-- these tuples are also "reordered"
					Tuple {
						clsRel1 = self.eSubpackages->at(1).eClassifiers->at(3),
						pkgRel1 = self.eSubpackages->at(3).eSubpackages->at(3),
						pkgRel2 = self.eSubpackages->at(3).eSubpackages->at(3),
						clsRel2 = self.eSubpackages->at(2).eClassifiers->at(3)
					},
					Tuple {
						clsRel1 = self.eSubpackages->at(1).eClassifiers->at(3),
						pkgRel1 = self.eSubpackages->at(3).eSubpackages->at(1),
						pkgRel2 = self.eSubpackages->at(3).eSubpackages->at(3),
						clsRel2 = self.eSubpackages->at(2).eClassifiers->at(3)
					}
				},
				-- conclusion
				myConclusion = Set {
					Tuple {
						clsRel1 = self.eSubpackages->at(1).eClassifiers->at(1),
						pkgRel1 = self.eSubpackages->at(3).eSubpackages->at(1),
						pkgRel2 = self.eSubpackages->at(3).eSubpackages->at(2),
						clsRel2 = self.eSubpackages->at(2).eClassifiers->at(2)
					}
				}
			},
			-- after reordering, this is the first tuple
			Tuple {
				-- premise
				myPremise = Set {
					Tuple {
						clsRel1 = self.eSubpackages->at(1).eClassifiers->at(1),
						pkgRel1 = self.eSubpackages->at(3).eSubpackages->at(2),
						pkgRel2 = self.eSubpackages->at(3).eSubpackages->at(3),
						clsRel2 = self.eSubpackages->at(2).eClassifiers->at(1)
					},
					Tuple {
						clsRel1 = self.eSubpackages->at(1).eClassifiers->at(2),
						pkgRel1 = self.eSubpackages->at(3).eSubpackages->at(3),
						pkgRel2 = self.eSubpackages->at(3).eSubpackages->at(1),
						clsRel2 = self.eSubpackages->at(2).eClassifiers->at(2)
					}
				},
				-- conclusion
				myConclusion = Set {
					Tuple {
						clsRel1 = self.eSubpackages->at(1).eClassifiers->at(3),
						pkgRel1 = self.eSubpackages->at(3).eSubpackages->at(1),
						pkgRel2 = self.eSubpackages->at(3).eSubpackages->at(2),
						clsRel2 = self.eSubpackages->at(2).eClassifiers->at(3)
					}
				}
			},
			-- after reordering, this is the last tuple
			Tuple {
				-- premise
				myPremise = Set {
					Tuple {
						clsRel1 = self.eSubpackages->at(1).eClassifiers->at(3),
						pkgRel1 = self.eSubpackages->at(3).eSubpackages->at(3),
						pkgRel2 = self.eSubpackages->at(3).eSubpackages->at(3),
						clsRel2 = self.eSubpackages->at(2).eClassifiers->at(3)
					},
					Tuple {
						clsRel1 = self.eSubpackages->at(1).eClassifiers->at(3),
						pkgRel1 = self.eSubpackages->at(3).eSubpackages->at(2),
						pkgRel2 = self.eSubpackages->at(3).eSubpackages->at(2),
						clsRel2 = self.eSubpackages->at(2).eClassifiers->at(3)
					},
					Tuple {
						clsRel1 = self.eSubpackages->at(1).eClassifiers->at(3),
						pkgRel1 = self.eSubpackages->at(3).eSubpackages->at(2),
						pkgRel2 = self.eSubpackages->at(3).eSubpackages->at(3),
						clsRel2 = self.eSubpackages->at(2).eClassifiers->at(3)
					},
					Tuple {
						clsRel1 = self.eSubpackages->at(1).eClassifiers->at(3),
						pkgRel1 = self.eSubpackages->at(3).eSubpackages->at(2),
						pkgRel2 = self.eSubpackages->at(3).eSubpackages->at(2),
						clsRel2 = self.eSubpackages->at(2).eClassifiers->at(2)
					},
					Tuple {
						clsRel1 = self.eSubpackages->at(1).eClassifiers->at(3),
						pkgRel1 = self.eSubpackages->at(3).eSubpackages->at(3),
						pkgRel2 = self.eSubpackages->at(3).eSubpackages->at(1),
						clsRel2 = self.eSubpackages->at(2).eClassifiers->at(2)
					}
				},
				-- conclusion
				myConclusion = Set {					
					Tuple {
						clsRel1 = self.eSubpackages->at(1).eClassifiers->at(2),
						pkgRel1 = self.eSubpackages->at(3).eSubpackages->at(3),
						pkgRel2 = self.eSubpackages->at(3).eSubpackages->at(1),
						clsRel2 = self.eSubpackages->at(2).eClassifiers->at(2)
					},
					Tuple {
						clsRel1 = self.eSubpackages->at(1).eClassifiers->at(1),
						pkgRel1 = self.eSubpackages->at(3).eSubpackages->at(2),
						pkgRel2 = self.eSubpackages->at(3).eSubpackages->at(3),
						clsRel2 = self.eSubpackages->at(2).eClassifiers->at(1)
					},
					Tuple {
						clsRel1 = self.eSubpackages->at(1).eClassifiers->at(1),
						pkgRel1 = self.eSubpackages->at(3).eSubpackages->at(1),
						pkgRel2 = self.eSubpackages->at(3).eSubpackages->at(2),
						clsRel2 = self.eSubpackages->at(2).eClassifiers->at(2)
					}
				}
			}
		};
	}
			
}