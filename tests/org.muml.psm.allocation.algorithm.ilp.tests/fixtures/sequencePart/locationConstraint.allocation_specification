test {
	nameProvider  'org.muml.psm.allocation.algorithm.ilp.tests.EcoreNameProvider'
	storageProvider 'org.muml.psm.allocation.algorithm.ilp.tests.EcoreStorageProvider' 
	
	oclContext ecore::EPackage
	
	import 'http://www.eclipse.org/emf/2002/Ecore'
	
	relation cls2pkg {
		descriptors (first : ecore::EClassifier, second : ecore::EPackage);
		lower 1;
		upper -1;
		ocl self.eSubpackages->at(1).eClassifiers->product(
			self.eSubpackages->at(3).eSubpackages
		);
	}
	
	relation cls2cls {
		descriptors (first : ecore::EClassifier, second : ecore::EClassifier);
		lower 1;
		upper -1;
		ocl self.eSubpackages->at(1).eClassifiers->product(
			self.eSubpackages->at(2).eClassifiers
		);
	}
	
	constraint requiredLocation r1 {
		descriptors foobar;
		ocl Set {
			Tuple {
				foobar = Sequence {
					self.eSubpackages->at(1).eClassifiers->at(1),
					self.eSubpackages->at(3).eSubpackages->at(1)
				}
			},
			Tuple {
				foobar = Sequence {
					self.eSubpackages->at(1).eClassifiers->at(1),
					self.eSubpackages->at(2).eClassifiers->at(1)
				}
			},
			Tuple {
				foobar = Sequence {
					self.eSubpackages->at(1).eClassifiers->at(2),
					self.eSubpackages->at(3).eSubpackages->at(1)
				}
			}
		};
	}
	
	-- test that the sequences are associated to the correct "group":
	-- the semantics is as follows:
	-- 1.) group the sequences by size: sequences with the same size
	--     belong to the same group
	-- 2.) for each group, the usual equivalence class construction is done
	-- For a better understanding of the test case, we annotate each sequence
	-- with the corresponding group and its equivalence class (_within_ the
	-- group)
	constraint requiredLocation r2 {
		descriptors seq;
		ocl Set {
			-- group 1, eq class: A_1
			Tuple {
				seq = Sequence {
					self.eSubpackages->at(1).eClassifiers->at(1),
					self.eSubpackages->at(3).eSubpackages->at(1),
					self.eSubpackages->at(1).eClassifiers->at(2),
					self.eSubpackages->at(2).eClassifiers->at(1)
				}
			},
			-- group 1, eq class: A_1
			Tuple {
				seq = Sequence {
					self.eSubpackages->at(1).eClassifiers->at(1),
					self.eSubpackages->at(3).eSubpackages->at(2),
					self.eSubpackages->at(1).eClassifiers->at(2),
					self.eSubpackages->at(2).eClassifiers->at(2)
				}
			},
			-- group 1, eq class: A_1
			Tuple {
				seq = Sequence {
					self.eSubpackages->at(1).eClassifiers->at(1),
					self.eSubpackages->at(3).eSubpackages->at(3),
					self.eSubpackages->at(1).eClassifiers->at(2),
					self.eSubpackages->at(2).eClassifiers->at(3)
				}
			},
			-- group 1, eq class: B_1
			Tuple {
				seq = Sequence {
					self.eSubpackages->at(1).eClassifiers->at(2),
					self.eSubpackages->at(3).eSubpackages->at(3),
					self.eSubpackages->at(1).eClassifiers->at(3),
					self.eSubpackages->at(2).eClassifiers->at(3)
				}
			},
			-- group 1, eq class: B_1
			Tuple {
				seq = Sequence {
					self.eSubpackages->at(1).eClassifiers->at(2),
					self.eSubpackages->at(3).eSubpackages->at(1),
					self.eSubpackages->at(1).eClassifiers->at(3),
					self.eSubpackages->at(2).eClassifiers->at(1)
				}
			},
			-- group 2, eq class A_2
			Tuple {
				seq = Sequence {
					self.eSubpackages->at(1).eClassifiers->at(1),
					self.eSubpackages->at(2).eClassifiers->at(3)
				}
			},
			-- group 2, eq class B_2
			Tuple {
				seq = Sequence {
					self.eSubpackages->at(1).eClassifiers->at(2),
					self.eSubpackages->at(2).eClassifiers->at(3)
				}
			},
			-- group 2, eq class B_2
			Tuple {
				seq = Sequence {
					self.eSubpackages->at(1).eClassifiers->at(2),
					self.eSubpackages->at(3).eSubpackages->at(1)
				}
			},
			-- group 3, eq class A_3
			Tuple {
				seq = Sequence {
					self.eSubpackages->at(1).eClassifiers->at(1),
					self.eSubpackages->at(3).eSubpackages->at(2),
					self.eSubpackages->at(1).eClassifiers->at(2),
					self.eSubpackages->at(2).eClassifiers->at(2),
					self.eSubpackages->at(1).eClassifiers->at(2),
					self.eSubpackages->at(3).eSubpackages->at(2)
				}
			},
			-- group 3, eq class A_3
			Tuple {
				seq = Sequence {
					self.eSubpackages->at(1).eClassifiers->at(1),
					self.eSubpackages->at(3).eSubpackages->at(1),
					self.eSubpackages->at(1).eClassifiers->at(2),
					self.eSubpackages->at(2).eClassifiers->at(3),
					self.eSubpackages->at(1).eClassifiers->at(2),
					self.eSubpackages->at(3).eSubpackages->at(2)
				}
			},
			-- group 3, eq class B_3
			Tuple {
				seq = Sequence {
					-- note to myself: this sequence will be _reordered_
					self.eSubpackages->at(1).eClassifiers->at(3),
					self.eSubpackages->at(3).eSubpackages->at(1),
					self.eSubpackages->at(1).eClassifiers->at(2),
					self.eSubpackages->at(2).eClassifiers->at(3),
					self.eSubpackages->at(1).eClassifiers->at(1),
					self.eSubpackages->at(3).eSubpackages->at(2)
				}
			}
		};
	}
			
}