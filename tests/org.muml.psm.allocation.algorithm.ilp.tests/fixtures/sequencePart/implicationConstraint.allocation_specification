test {
	nameProvider  'org.muml.psm.allocation.algorithm.ilp.tests.EcoreNameProvider'
	storageProvider 'org.muml.psm.allocation.algorithm.ilp.tests.EcoreStorageProvider' 
	
	oclContext ecore::EPackage
	
	import 'http://www.eclipse.org/emf/2002/Ecore'
	
	relation atLeastOne {
		descriptors (first : ecore::EClassifier, second : ecore::EPackage);
		lower 1;
		upper -1;
		ocl self.eSubpackages->at(1).eClassifiers->product(
			self.eSubpackages->at(3).eSubpackages
		);
	}
	
	-- relate each ic.sub3.eSubpackages package to at least one ic.sub2.eClassifiers class
	relation atLeastOnePkg {
		descriptors (first : ecore::EPackage, second : ecore::EClassifier);
		lower 1;
		upper -1;
		ocl self.eSubpackages->at(3).eSubpackages->product(
			self.eSubpackages->at(2).eClassifiers
		);
	}
	
	-- If (ic.sub1.A1 is related ic.sub.p1 and ic.sub3.p2 is related to ic.sub2.B2), then
	-- ic.sub3.p3 is related to ic.sub2.B3
	constraint implication imp1 {
		premise myPremise;
		premise descriptors pSeq;
		conclusion myConclusion;
		conclusion descriptors cSeq;
		ocl Set {
			Tuple {
				-- premise
				myPremise = Set {
					Tuple {
						pSeq = Sequence {
							self.eSubpackages->at(1).eClassifiers->at(1),
							self.eSubpackages->at(3).eSubpackages->at(1),
							self.eSubpackages->at(3).eSubpackages->at(2),
							self.eSubpackages->at(2).eClassifiers->at(2)
						}
					}
				},
				-- conclusion
				myConclusion = Set {
					Tuple {
						cSeq = Sequence {
							self.eSubpackages->at(3).eSubpackages->at(3),
							self.eSubpackages->at(2).eClassifiers->at(3)
						}
					}
				}
			}
		};
	}
	
	-- The following should hold:
	-- * If ic.sub1.A1 is related to ic.sub3.p1, then
	--   ic.sub3.p3 is related to ic.sub2.B3
	-- * If ic.sub1.A3 is related to ic.sub3.p1, then
	--   ic.sub3.p3 is related to ic.sub2.B1
	constraint implication imp2 {
		premise _'premise';
		premise descriptors p;
		conclusion _'conclusion';
		conclusion descriptors c;
		ocl Set {
			Tuple {
				_'premise' = Set {
					Tuple {
						p = Sequence {
							self.eSubpackages->at(1).eClassifiers->at(1),
							self.eSubpackages->at(3).eSubpackages->at(1)
						}
					}
				},
				_'conclusion' = Set {
					Tuple {
						c = Sequence {
							self.eSubpackages->at(3).eSubpackages->at(3),
							self.eSubpackages->at(2).eClassifiers->at(3)
						}
					}
				}
			},
			Tuple {
				_'premise' = Set {
					Tuple {
						p = Sequence {
							self.eSubpackages->at(1).eClassifiers->at(3),
							self.eSubpackages->at(3).eSubpackages->at(1)
						}
					}
				},
				_'conclusion' = Set {
					Tuple {
						c = Sequence {
							self.eSubpackages->at(3).eSubpackages->at(3),
							self.eSubpackages->at(2).eClassifiers->at(1)
						}
					}
				}
			}
		};
	}
	
	-- If (ic.sub1.A3 is related to ic.sub3.p3 and ic.sub3.p3 is related to ic.sub2.B3
	--     and
	--     ic.sub1.A3 is related to ic.sub3.p1 and ic.sub3.p3 is related to ic.sub2.B3), then
	--  (ic.sub1.A1 is related ic.sub3.p1 and ic.sub3.p2 is related to ic.sub2.B2)
	constraint implication imp3 {
		premise myPremise;
		premise descriptors p;
		conclusion myConclusion;
		conclusion descriptors c;
		ocl Set {
			Tuple {
				-- premise
				myPremise = Set {
					Tuple {
						p = Sequence {
							self.eSubpackages->at(1).eClassifiers->at(3),
							self.eSubpackages->at(3).eSubpackages->at(3),
							self.eSubpackages->at(3).eSubpackages->at(3),
							self.eSubpackages->at(2).eClassifiers->at(3)
						}
					},
					Tuple {
						p = Sequence {
							self.eSubpackages->at(1).eClassifiers->at(3),
							self.eSubpackages->at(3).eSubpackages->at(1),
							self.eSubpackages->at(3).eSubpackages->at(3),
							self.eSubpackages->at(2).eClassifiers->at(3)
						}
					}
				},
				-- conclusion
				myConclusion = Set {
					Tuple {
						c = Sequence {
							self.eSubpackages->at(1).eClassifiers->at(1),
							self.eSubpackages->at(3).eSubpackages->at(1),
							self.eSubpackages->at(3).eSubpackages->at(2),
							self.eSubpackages->at(2).eClassifiers->at(2)
						}
					}
				}
			}
		};
	}
			
}