test {
	nameProvider  'org.muml.psm.allocation.algorithm.ilp.tests.EcoreNameProvider'
	storageProvider 'org.muml.psm.allocation.algorithm.ilp.tests.EcoreStorageProvider' 
	
	oclContext ecore::EPackage
	
	import 'http://www.eclipse.org/emf/2002/Ecore'
	
	relation cls2pkg {
		descriptors (first : ecore::EClassifier, second : ecore::EPackage);
		lower 1;
		upper -1;
		ocl self.eSubpackages->at(1).eClassifiers->product(
			self.eSubpackages->at(3).eSubpackages
		);
	}
	
	relation cls2cls {
		descriptors (first : ecore::EClassifier, second : ecore::EClassifier);
		lower 1;
		upper -1;
		ocl self.eSubpackages->at(1).eClassifiers->product(
			self.eSubpackages->at(2).eClassifiers
		);
	}
	
	service foo {
		qos q1 {
			weight w;
			descriptors seq;
			ocl Set {
				Tuple {
					seq = Sequence {
						self.eSubpackages->at(1).eClassifiers->at(1),
						self.eSubpackages->at(3).eSubpackages->at(1)
					},
					w = 5
				},
				Tuple {
					seq = Sequence {
						self.eSubpackages->at(1).eClassifiers->at(1),
						self.eSubpackages->at(2).eClassifiers->at(1),
						self.eSubpackages->at(1).eClassifiers->at(2),
						self.eSubpackages->at(3).eSubpackages->at(2)
					},
					w = 1
				},
				Tuple {
					seq = Sequence {
						self.eSubpackages->at(1).eClassifiers->at(1),
						self.eSubpackages->at(2).eClassifiers->at(1),
						self.eSubpackages->at(1).eClassifiers->at(2),
						self.eSubpackages->at(2).eClassifiers->at(2),
						self.eSubpackages->at(1).eClassifiers->at(3),
						self.eSubpackages->at(3).eSubpackages->at(3)
					},
					w = -10
				}
			};
		}
		
		qos q2 {
			weight w;
			descriptors (foo : ecore::EClassifier, bar : ecore::EPackage);
			ocl Set {
				Tuple {
					foo = self.eSubpackages->at(1).eClassifiers->at(3),
					bar = self.eSubpackages->at(3).eSubpackages->at(1),
					w = -15
				}
			};
		}
	}
	
	min measure foo;
}